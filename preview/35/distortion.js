import{FunctionGraph as e,setupAudio as t,setupPlayerControls as a}from"./common.js";window.addEventListener("load",async()=>{const r=await t("distortionproc.js","distortion-processor");a(r,[{type:"remote",label:"Guitar riff 1",url:"audio/Burns1.wav"},{type:"remote",label:"Guitar riff 2",url:"audio/BluesHawk1.wav"}]);let o=50,n=1;r.proc.parameters.get("inputGain").value=o,r.proc.parameters.get("outputGain").value=n;const l=new e(document.getElementById("funccanvas"));l.logx=!1,l.xlim=[-1,1],l.ylim=[-1,1];const i=new Float32Array(500),s=new Float32Array(500),m=()=>{for(let e=0;e<i.length;e++){const t=2*e/(i.length-1)-1;i[e]=t;let a=n*(2/(1+Math.exp(-t*o))-1);a>1?a=1:a<-1&&(a=-1),s[e]=a}l.drawData(i,s),l.drawMarkers([[Math.log(3)/o,.5*n]])},p=(e,t)=>{e.cancelAndHoldAtTime(0),e.exponentialRampToValueAtTime(t,r.currentTime+.05)};l.addEventListener("markermove",e=>{o=Math.log(3)/e.valX,o>1e3||o<0?o=1e3:o<Math.log(3)&&(o=Math.log(3)),n=2*e.valY,n>2?n=2:n<0&&(n=0),p(r.proc.parameters.get("inputGain"),o),p(r.proc.parameters.get("outputGain"),n),m()}),m()});