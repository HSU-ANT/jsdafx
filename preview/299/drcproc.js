class t extends AudioWorkletProcessor{constructor(t){super();const e=this;this.port.onmessage=a=>{"set-property"===a.data.action?e[a.data.param]=a.data.value:"list-properties"===a.data.action&&e.port.postMessage({response:"list-properties",properties:t})}}}class e extends t{constructor(){super(["bypass","newYorkStyle","envelopeSubsampling"]),this.instantaneousPower=1,this.gain=1,this.inputMaxima=new Float32Array(256),this.outputMaxima=new Float32Array(256),this.currentInputMax=0,this.currentOutputMax=0,this.maxSampleCount=0,this.envelopeSubsampling=2e3,this.bypass=!1,this.newYorkStyle=!1}static get parameterDescriptors(){return[{name:"limiterThreshold",defaultValue:-10},{name:"limiterLevel",defaultValue:-10},{name:"noiseThreshold",defaultValue:-80},{name:"compressionRatio",defaultValue:2}]}static parameterAt(t,e){return t[1===t.length?0:e]}process(t,a,s){if(0===t[0].length)return!0;for(let i=0;i<t[0][0].length;i++){let r=0;for(let e=0;e<t[0].length;e++){const a=t[0][e][i];r+=a*a,this.currentInputMax=Math.max(this.currentInputMax,a)}r/=t[0].length,r>this.instantaneousPower?this.instantaneousPower=.99*this.instantaneousPower+.01*r:this.instantaneousPower=.995*this.instantaneousPower+.005*r;const n=10*Math.log10(this.instantaneousPower),o=e.parameterAt(s.limiterThreshold,i),u=e.parameterAt(s.limiterLevel,i),p=e.parameterAt(s.noiseThreshold,i),h=e.parameterAt(s.compressionRatio,i);let l=-1e3;n>o?l=u-n:n>p&&(l=u-n+(n-o)/h),this.gain=.99*this.gain+.01*Math.pow(10,l/20);for(let e=0;e<t[0].length;e++){const s=t[0][e],r=a[0][e];this.bypass?r[i]=s[i]:r[i]=this.gain*s[i]+(this.newYorkStyle?s[i]:0),this.currentOutputMax=Math.max(this.currentOutputMax,r[i])}++this.maxSampleCount>=this.envelopeSubsampling&&(this.maxSampleCount=0,this.inputMaxima.copyWithin(0,1),this.inputMaxima[this.inputMaxima.length-1]=this.currentInputMax,this.currentInputMax=0,this.outputMaxima.copyWithin(0,1),this.outputMaxima[this.outputMaxima.length-1]=this.currentOutputMax,this.currentOutputMax=0,this.port.postMessage({inputEnvelope:new Float32Array(this.inputMaxima),outputEnvelope:new Float32Array(this.outputMaxima)}))}return!0}}registerProcessor("drc-processor",e);