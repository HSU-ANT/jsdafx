class t extends AudioWorkletProcessor{constructor(t){super();const s=this;this.port.onmessage=(a=>{"set-property"===a.data.action?s[a.data.param]=a.data.value:"list-properties"===a.data.action&&s.port.postMessage({response:"list-properties",properties:t})})}}class s extends t{constructor(){super(["type","bypass"]),this.type="lowpass",this.state=new Array(0),this.a0=1,this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.bypass=!1}static get parameterDescriptors(){return[{name:"omegaC",defaultValue:1},{name:"gain",defaultValue:1},{name:"Q",defaultValue:1}]}setChannelCount(t){if(this.state.length!==t){this.state=new Array(t);for(let t=0;t<this.state.length;t++)this.state[t]=new Float32Array(2)}}set type(t){this.coeffcalc=s.coeffcalc[t]}static parameterAt(t,s){return t[1===t.length?0:s]}process(t,a,h){this.setChannelCount(t[0].length);let e=!0;if(1===h.omegaC.length&&1===h.gain.length&&1===h.Q.length){const t=Math.tan(h.omegaC[0]/2);this.coeffcalc(t,h.gain[0],h.Q[0]),e=!1}for(let i=0;i<t[0][0].length;i++)for(let r=0;r<t[0].length;r++){const o=t[0][r],n=a[0][r],c=this.state[r];if(e){const t=Math.tan(s.parameterAt(h.omegaC,i)/2);this.coeffcalc(t,s.parameterAt(h.gain,i),s.parameterAt(h.Q,i))}const l=(o[i]-this.a1*c[0]-this.a2*c[1])/this.a0;this.bypass?n[i]=o[i]:n[i]=this.b0*l+this.b1*c[0]+this.b2*c[1],c[1]=c[0],c[0]=l}return!0}}s.coeffcalc={lowpass(t){const s=t*t;this.b0=s,this.b1=2*s,this.b2=s,this.a0=1+Math.SQRT2*t+s,this.a1=2*(s-1),this.a2=1-Math.SQRT2*t+s},highpass(t){const s=t*t;this.b0=1,this.b1=-2,this.b2=1,this.a0=1+Math.SQRT2*t+s,this.a1=2*(s-1),this.a2=1-Math.SQRT2*t+s},lowshelving(t,s){const a=t*t;if(s>=1){const h=s;this.b0=1+Math.sqrt(2*h)*t+h*a,this.b1=2*(h*a-1),this.b2=1-Math.sqrt(2*h)*t+h*a,this.a0=1+Math.SQRT2*t+a,this.a1=2*(-1+a),this.a2=1-Math.SQRT2*t+a}else{const h=1/s;this.b0=1+Math.SQRT2*t+a,this.b1=2*(-1+a),this.b2=1-Math.SQRT2*t+a,this.a0=1+Math.sqrt(2*h)*t+h*a,this.a1=2*(h*a-1),this.a2=1-Math.sqrt(2*h)*t+h*a}},highshelving(t,s){const a=t*t;if(s>=1){const h=s;this.b0=h+Math.sqrt(2*h)*t+a,this.b1=2*(-h+a),this.b2=h-Math.sqrt(2*h)*t+a,this.a0=1+Math.SQRT2*t+a,this.a1=2*(-1+a),this.a2=1-Math.SQRT2*t+a}else{const h=1/s;this.b0=1+Math.SQRT2*t+a,this.b1=2*(-1+a),this.b2=1-Math.SQRT2*t+a,this.a0=h+Math.sqrt(2*h)*t+a,this.a1=2*(-h+a),this.a2=h-Math.sqrt(2*h)*t+a}},peak(t,s,a){const h=t*t;if(s>=1){const e=s;this.b0=1+e/a*t+h,this.b1=2*(-1+h),this.b2=1-e/a*t+h,this.a0=1+1/a*t+h,this.a1=2*(-1+h),this.a2=1-1/a*t+h}else{const e=1/s;this.b0=1+1/a*t+h,this.b1=2*(-1+h),this.b2=1-1/a*t+h,this.a0=1+e/a*t+h,this.a1=2*(-1+h),this.a2=1-e/a*t+h}}},registerProcessor("eq-processor",s);